generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  CARETAKER
  OWNER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String?
  name       String
  last_name  String
  phone      String
  address    String?
  latitude   Decimal
  longitude  Decimal
  last_login DateTime?
  role       UserRole  @default(USER)
  image      String?
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  accounts         Account[]
  sessions         Session[]
  pets             Pet[]
  bookings         Booking[]         @relation("OwnerBookings")
  caregiverProfile CaregiverProfile?

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model Booking {
  id                      Int      @id @default(autoincrement())
  ownerId                 String
  caregiverId             Int
  petId                   Int
  serviceId               Int
  start_time              DateTime
  end_time                DateTime
  status                  Int
  total_price             Decimal
  additional_instructions String?

  owner     User             @relation("OwnerBookings", fields: [ownerId], references: [id])
  caregiver CaregiverProfile @relation(fields: [caregiverId], references: [id])
  pet       Pet              @relation(fields: [petId], references: [id])
  service   Service          @relation(fields: [serviceId], references: [id])
  reviews   Review?

  @@map("bookings")
}

model CaregiverProfile {
  id                 Int       @id @default(autoincrement())
  userId             String    @unique
  experience         String?
  description        String?
  coverage_radius_KM Int
  verified           Int
  verification_date  DateTime?
  average_rating     Decimal
  total_reviews      Int

  user         User                    @relation(fields: [userId], references: [id])
  bookings     Booking[]
  rates        CaregiverRate[]
  availability CaregiverAvailability[]

  @@map("caregiver_profiles")
}

model Pet {
  id                   Int      @id @default(autoincrement())
  userId               String
  name                 String
  species              String
  breed                String?
  age                  Int
  weight               Int
  special_instructions String?
  medical_needs        String?
  is_active            Int
  createdAt            DateTime @default(now()) @map(name: "created_at")
  updatedAt            DateTime @default(now()) @updatedAt @map(name: "updated_at")

  owner    User      @relation(fields: [userId], references: [id])
  bookings Booking[]

  @@map("pets")
}

model Review {
  id        Int     @id @default(autoincrement())
  bookingId Int     @unique
  rating    Int
  comment   String?

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("reviews")
}

model Service {
  id           Int     @id @default(autoincrement())
  name         String
  description  String?
  min_duration Int
  max_duration Int

  bookings Booking[]
  rates    CaregiverRate[]

  @@map("services")
}

model CaregiverAvailability {
  id          Int      @id @default(autoincrement())
  caregiverId Int
  weekday     Int
  start_time  DateTime
  end_time    DateTime

  caregiver CaregiverProfile @relation(fields: [caregiverId], references: [id])

  @@map("caregiver_availability")
}

model CaregiverRate {
  id                    Int     @id @default(autoincrement())
  caregiverId           Int
  serviceId             Int
  base_price            Decimal
  additional_hour_price Decimal

  caregiver CaregiverProfile @relation(fields: [caregiverId], references: [id])
  service   Service          @relation(fields: [serviceId], references: [id])

  @@map("caregiver_rates")
}
